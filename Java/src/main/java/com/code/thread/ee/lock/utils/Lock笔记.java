package com.code.thread.ee.lock.utils;

public class Lock笔记 {


    /*
     *--------------------------------------------------------------------------------------------------
     *
     * CountDownLatch
     *      Aa-Threads等待（await）B-Threads完成（countDown），Aa-Threads再继续执行。 ---> await()、countDown()
     *
     *--------------------------------------------------------------------------------------------------
     *
     * CyclicBarrier
     *      Threads在某一位置互相等待（await）直到全员到达，再继续执行。 ---> await()
     *
     *--------------------------------------------------------------------------------------------------
     *
     * Semaphore
     *      信号量，Threads通过获取（acquire）与释放（release）信号量来进行互斥访问。---> acquire()、release()
     *
     *--------------------------------------------------------------------------------------------------
     *
     * Lock
     *      ReentrantLock       重入锁（排它锁）
     *          Thread通过获取（lock）与释放（unlock）锁来进行互斥访问。---> lock()、unlock()
     *      ReentrantReadWriteLock      可重入读写锁
     *          Thread通过ReentrantReadWriteLock获取读/写锁（readLock 、readLock）
     *          并对读/写锁进行加锁（lock）和释放（unlock）来进行互斥访问。---> lock.readLock()、lock.writeLock()、lock()、unlock()
     *
     *--------------------------------------------------------------------------------------------------
     *
     * Condition（条件）
     *      锁工具（ 可配合ReentrantLock（重入锁）等Lock使用 ）
     *      可以在加锁后（lock）与释放锁前（unlock），通过等待（await）与通知（signal）来使 Threads 按照计划执行任务
     *
     *--------------------------------------------------------------------------------------------------
     *
     * StampedLock
     *      带戳的锁（可以解决可重入读写锁的悲观读）
     *
     *--------------------------------------------------------------------------------------------------
     *
     * Exchanger
     *      Threads交换数据。---> exchange()
     *
     *--------------------------------------------------------------------------------------------------
     *
     * ForkJoin
     *      分而治之
     *                      ForkJoinTask <------------- 由 ForkJoinPool 操纵
     *              _____________|_____________
     *             |                          |
     *       RecursiveTask              RecursiveTask
     *
     *--------------------------------------------------------------------------------------------------
     *
     * Phaser
     *
     *--------------------------------------------------------------------------------------------------
     */


}
